// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    Bit(in=in, load=load & (address == 0), out=out0);
    Bit(in=in, load=load & (address == 1), out=out1);
    Bit(in=in, load=load & (address == 2), out=out2);
    Bit(in=in, load=load & (address == 3), out=out3);
    Bit(in=in, load=load & (address == 4), out=out4);
    Bit(in=in, load=load & (address == 5), out=out5);
    Bit(in=in, load=load & (address == 6), out=out6);
    Bit(in=in, load=load & (address == 7), out=out7);
    Bit(in=in, load=load & (address == 8), out=out8);
    Bit(in=in, load=load & (address == 9), out=out9);
    Bit(in=in, load=load & (address == 10), out=out10);
    Bit(in=in, load=load & (address == 11), out=out11);
    Bit(in=in, load=load & (address == 12), out=out12);
    Bit(in=in, load=load & (address == 13), out=out13);
    Bit(in=in, load=load & (address == 14), out=out14);
    Bit(in=in, load=load & (address == 15), out=out15);
    Bit(in=in, load=load & (address == 16), out=out16);
    Bit(in=in, load=load & (address == 17), out=out17);
    Bit(in=in, load=load & (address == 18), out=out18);
    Bit(in=in, load=load & (address == 19), out=out19);
    Bit(in=in, load=load & (address == 20), out=out20);
    Bit(in=in, load=load & (address == 21), out=out21);
    Bit(in=in, load=load & (address == 22), out=out22);
    Bit(in=in, load=load & (address == 23), out=out23);
    Bit(in=in, load=load & (address == 24), out=out24);
    Bit(in=in, load=load & (address == 25), out=out25);
    Bit(in=in, load=load & (address == 26), out=out26);
    Bit(in=in, load=load & (address == 27), out=out27);
    Bit(in=in, load=load & (address == 28), out=out28);
    Bit(in=in, load=load & (address == 29), out=out29);
    Bit(in=in, load=load & (address == 30), out=out30);
    Bit(in=in, load=load & (address == 31), out=out31);
    Bit(in=in, load=load & (address == 32), out=out32);
    Bit(in=in, load=load & (address == 33), out=out33);
    Bit(in=in, load=load & (address == 34), out=out34);
    Bit(in=in, load=load & (address == 35), out=out35);
    Bit(in=in, load=load & (address == 36), out=out36);
    Bit(in=in, load=load & (address == 37), out=out37);
    Bit(in=in, load=load & (address == 38), out=out38);
    Bit(in=in, load=load & (address == 39), out=out39);
    Bit(in=in, load=load & (address == 40), out=out40);
    Bit(in=in, load=load & (address == 41), out=out41);
    Bit(in=in, load=load & (address == 42), out=out42);
    Bit(in=in, load=load & (address == 43), out=out43);
    Bit(in=in, load=load & (address == 44), out=out44);
    Bit(in=in, load=load & (address == 45), out=out45);
    Bit(in=in, load=load & (address == 46), out=out46);
    Bit(in=in, load=load & (address == 47), out=out47);
    Bit(in=in, load=load & (address == 48), out=out48);
    Bit(in=in, load=load & (address == 49), out=out49);
    Bit(in=in, load=load & (address == 50), out=out50);
    Bit(in=in, load=load & (address == 51), out=out51);
    Bit(in=in, load=load & (address == 52), out=out52);
    Bit(in=in, load=load & (address == 53), out=out53);
    Bit(in=in, load=load & (address == 54), out=out54);
    Bit(in=in, load=load & (address == 55), out=out55);
    Bit(in=in, load=load & (address == 56), out=out56);
    Bit(in=in, load=load & (address == 57), out=out57);
    Bit(in=in, load=load & (address == 58), out=out58);
    Bit(in=in, load=load & (address == 59), out=out59);
    Bit(in=in, load=load & (address == 60), out=out60);
    Bit(in=in, load=load & (address == 61), out=out61);
    Bit(in=in, load=load & (address == 62), out=out62);
    Bit(in=in, load=load & (address == 63), out=out63);
    Mux(a=out0, b=out1, sel=address[0], out=mux0);
    Mux(a=mux0, b=out2, sel=address[1], out=mux1);
    Mux(a=mux1, b=out3, sel=address[2], out=mux2);
    Mux(a=mux2, b=out4, sel=address[3], out=mux3);
    Mux(a=mux3, b=out5, sel=address[4], out=mux4);
    Mux(a=mux4, b=out6, sel=address[5], out=out);
}